use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct VulnerabilityCheck {
    pub id: String,
    pub title: String,
    pub severity: String,
    pub pattern: String,
    pub safe_pattern: Option<String>,
    pub description: String,
    pub suggested_fix: String,
    pub language: String,
}

pub fn initialize_vulnerability_checks() -> Vec<VulnerabilityCheck> {
    vec![
        VulnerabilityCheck {
            id: "VULN001".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Integer Overflow or Underflow".to_string(),
            severity: "High".to_string(),
            pattern: r"let\s+\w+\s*=\s*\w+\.\w+\s*[+\-*\/]\s*\w+;".to_string(),
            safe_pattern: Some(r"\.checked_add\(|\.checked_sub\(|\.checked_mul\(|\.checked_div\(".to_string()),
            description: "Performing arithmetic operation without checking for overflow or underflow.".to_string(),
            suggested_fix: "Use `checked_add`, `checked_sub`, `checked_mul`, or `checked_div` to safely perform arithmetic operations.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN002".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Loss of Precision".to_string(),
            severity: "High".to_string(),
            pattern: r"\.try_round_u64\(\s*\)".to_string(),
            safe_pattern: Some(r"\.try_floor_u64\(\s*\)".to_string()),
            description: "The use of try_round_u64() for rounding up may lead to loss of precision.".to_string(),
            suggested_fix: "Use try_floor_u64() to prevent potential loss of precision.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN003".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Inaccurate Calculation Results".to_string(),
            severity: "High".to_string(),
            pattern: r"\.saturating_(add|sub|mul)\(".to_string(),
            safe_pattern: Some(r"\.checked_(add|sub|mul|div)\(".to_string()),
            description: "Reliance on saturating arithmetic operations without considering precision loss.".to_string(),
            suggested_fix: "Consider using `checked_add`, `checked_sub`, `checked_mul`, or `checked_div` to handle arithmetic operations explicitly and avoid precision loss.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN004".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Panic due to Division by Zero".to_string(),
            severity: "High".to_string(),
            pattern: r"\b\d+\s*/\s*0\b".to_string(),
            safe_pattern: None,
            description: "Division by zero causing the program to panic and terminate unexpectedly.".to_string(),
            suggested_fix: "Ensure divisor is not zero before performing division, or use checked division methods.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN006".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Error Not Handled".to_string(),
            severity: "High".to_string(),
            pattern: r"&spl_token::instruction::transfer\s*\(".to_string(),
            safe_pattern: Some(r"&spl_token::instruction::transfer\s*\(.*\)?;".to_string()),
            description: "Function calls that might return `Err` are not checked for errors.".to_string(),
            suggested_fix: "Ensure that results are checked for errors. Use `?` at the end of the line to propagate errors.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN007".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Missing Check for the Permission of Caller".to_string(),
            severity: "Low".to_string(),
            pattern: r"fn\s+init_market\s*\(\s*accounts\s*:\s*&\[AccountInfo\]\s*\)\s*->\s*ProgramResult\s*\{".to_string(),
            safe_pattern: Some(r"require_is_authorized_signer\(".to_string()), 
            description: "Missing verification of caller permissions before sensitive operations.".to_string(),
            suggested_fix: "Implement and invoke a permission check function to verify the caller's authority.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN008".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Account Signer Check".to_string(),
            severity: "High".to_string(),
            pattern: r"next_account_info\s*\(".to_string(),
            safe_pattern: Some(r"if\s+!\w+\.is_signer".to_string()),
            description: "Ensure the expected signer account has actually signed to prevent unauthorized account modifications.".to_string(),
            suggested_fix: "Verify `is_signer` is true for transactions requiring signatures.".to_string(),
        },
        
        VulnerabilityCheck {
            id: "VULN009".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Account Writable Check".to_string(),
            severity: "High".to_string(),
            pattern: r"next_account_info\s*\(".to_string(),
            safe_pattern: Some(r"if\s+!\w+\.is_writable".to_string()),
            description: "Ensure state accounts are checked as writable to prevent unauthorized modifications.".to_string(),
            suggested_fix: "Verify `is_writable` is true for accounts that should be modified.".to_string(),
        },
        
        VulnerabilityCheck {
            id: "VULN010".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Account Owner or Program ID Check".to_string(),
            severity: "High".to_string(),
            pattern: r"next_account_info\s*\(".to_string(),
            safe_pattern: Some(r"if\s+\w+\.owner\s*!=".to_string()),
            description: "Verify the owner of state accounts to prevent fake data injection by malicious programs.".to_string(),
            suggested_fix: "Check the account's owner matches the expected program ID.".to_string(),
        },
        
        VulnerabilityCheck {
            id: "VULN011".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Account Initialized Check".to_string(),
            severity: "High".to_string(),
            pattern: r"try_from_slice\s*\(".to_string(),
            safe_pattern: Some(r"if\s+\w+\.is_initialized".to_string()),
            description: "Prevent re-initialization of already initialized accounts.".to_string(),
            suggested_fix: "Ensure account's `is_initialized` flag is checked before initializing.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN017".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Signer Authorization - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"pub\s+fn\s+\w+\s*\(ctx:\s*Context<\w+>\)\s*->\s*ProgramResult\s*\{".to_string(),
            safe_pattern: Some(r"if\s+!\w+\.is_signer\s*\{".to_string()),
            description: "Signer check is missing, which could lead to unauthorized execution.".to_string(),
            suggested_fix: "Add a check to verify if the caller is a signer.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN018".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Account Data Matching - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"SplTokenAccount::unpack\(&ctx.accounts.\w+.data.borrow\(\)\)".to_string(),
            safe_pattern: Some(r"if\s+ctx\.accounts\.\w+\.key\s*!=\s*&\w+\.owner\s*\{".to_string()),
            description: "Missing verification of token ownership or mint authority in SPL Token accounts.".to_string(),
            suggested_fix: "Verify token ownership matches the expected authority before proceeding.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN019".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Owner Checks - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"SplTokenAccount::unpack\(&ctx.accounts.\w+.data.borrow\(\)\)".to_string(),
            safe_pattern: Some(r"if\s+ctx.accounts.\w+.owner\s*!=\s*&spl_token::ID\s*\{".to_string()),
            description: "Missing checks on the owner field in the metadata of an Account or on the Account itself.".to_string(),
            suggested_fix: "Ensure the owner of the account is verified against the expected program ID.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN020".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Type Cosplay - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"User::try_from_slice\(&ctx.accounts.\w+.data.borrow\(\)\)".to_string(),
            safe_pattern: Some(r"if\s+\w+.discriminant\s*!=\s*AccountDiscriminant::\w+\s*\{".to_string()),
            description: "Risks of different accounts impersonating each other by sharing identical data structures.".to_string(),
            suggested_fix: "Add discriminant checks to differentiate account types securely.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN021".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Check Initialize - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"User::try_from_slice\(&ctx.accounts.\w+.data.borrow\(\)\)".to_string(),
            safe_pattern: Some(r"if\s+\w+.discriminator\s*==\s*true\s*\{".to_string()),
            description: "Data should only be initialized once; missing checks can lead to reinitialization.".to_string(),
            suggested_fix: "Use a flag to ensure data is initialized only once.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN022".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Arbitrary CPI - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"solana_program::program::invoke\(".to_string(),
            safe_pattern: Some(r"if &spl_token::ID != ctx.accounts.token_program.key \{".to_string()),
            description: "Unverified target program id in CPI can lead to arbitrary code execution.".to_string(),
            suggested_fix: "Ensure the target program id is verified against expected program id.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN023".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Duplicate Mutable Accounts - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"let\s+user_a\s+=\s+&mut\s+ctx.accounts.user_a;.*let\s+user_b\s+=\s+&mut\s+ctx.accounts.user_b;".to_string(),
            safe_pattern: Some(r"if ctx.accounts.user_a.key\(\) == ctx.accounts.user_b.key\(\) \{".to_string()),
            description: "Passing the same mutable account multiple times may result in unintended data overwriting.".to_string(),
            suggested_fix: "Add checks to ensure that mutable accounts passed are distinct.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN024".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Bump Seed Canonicalization  - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"Pubkey::create_program_address\(&\[".to_string(),
            safe_pattern: Some(r"let \(address, expected_bump\) = Pubkey::find_program_address\(&\[".to_string()),
            description: "Improper validation of bump seeds can lead to security vulnerabilities.".to_string(),
            suggested_fix: "Use `find_program_address` for bump seed canonicalization and validate against expected seeds.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN025".to_string(),
            language: "Rust-Solana".to_string(),
            title: "PDA Sharing  - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"token::transfer\(ctx.accounts.transfer_ctx\(\).with_signer\(&\[\w+\]\),".to_string(),
            safe_pattern: Some(r"let seeds = &\[\w+.withdraw_destination.as_ref\(\), &\[\w+.bump\]\];".to_string()),
            description: "Sharing PDA across multiple roles without proper permission separation may lead to unauthorized access.".to_string(),
            suggested_fix: "Ensure PDAs used across roles have distinct seeds and permissions.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN026".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Closing Accounts  - Anchor".to_string(),
            severity: "High".to_string(),
            pattern: r"\*\*ctx.accounts.account.to_account_info\(\).lamports.borrow_mut\(\) = 0;".to_string(),
            safe_pattern: Some(r"let mut data = account.try_borrow_mut_data\(\)?;.*CLOSED_ACCOUNT_DISCRIMINATOR".to_string()),
            description: "Improper closing of accounts may leave them vulnerable to misuse.".to_string(),
            suggested_fix: "Ensure accounts are properly closed by transferring lamports and marking with a discriminator.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN027".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Sysvar System Account Not Checked".to_string(),
            severity: "High".to_string(),
            pattern: r"solana_program::sysvar::instructions::load_current_index\(\s*&accs\.\w+\.try_borrow_mut_data\(\)\?\s*\)".to_string(),
            safe_pattern: Some(r"if \*accs\.\w+\.key != solana_program::sysvar::instructions::id\(\) \{".to_string()),
            description: "Sysvar system account is accessed without verifying its legitimacy, exposing the contract to potential manipulation or attacks.".to_string(),
            suggested_fix: "Before deserializing information from a sysvar account, verify that the incoming address matches the expected sysvar ID.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN028".to_string(),
            language: "Rust-Solana".to_string(),
            title: "PDA Account Misuse Without Proper Verification".to_string(),
            severity: "High".to_string(),
            pattern: r"CpiContext::new\(\s*self.token_program.clone\(\),\s*Transfer\s*\{.*?authority: self.market_authority.clone\(\),.*?\}\s*\)".to_string(),
            safe_pattern: Some(r"CpiContext::new\(.*Burn\s*\{.*?authority: self.depositor.clone\(\),.*?\}\s*\)".to_string()),
            description: "The PDA account is utilized without validating the caller's and beneficiary's accounts, allowing unauthorized actions such as burning other users' Tokens and transferring proceeds to an attacker's account.".to_string(),
            suggested_fix: "Implement checks to verify the depositor's signature and ensure the deposit_account cannot be forged by validating the derived address generated by seeds from reserve.key and depositor.key.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN029".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Unchecked Account Deserialization".to_string(),
            severity: "High".to_string(),
            pattern: r"try_from_slice\(&ctx.accounts.\w+.data.borrow\(\)\?\)".to_string(),
            safe_pattern: Some(r"if ctx.accounts.\w+.owner == &expected_program_id { ... }".to_string()),
            description: "Failing to check if an account is of the expected type before deserializing can lead to incorrect assumptions about state.".to_string(),
            suggested_fix: "Ensure accounts are of the expected type before deserialization.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN030".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Log Injection".to_string(),
            severity: "Medium".to_string(),
            pattern: r"msg!\(.*?\)".to_string(),
            safe_pattern: None,
            description: "Injection vulnerabilities in program logs can lead to misleading or harmful information being logged.".to_string(),
            suggested_fix: "Sanitize all inputs that are logged to prevent log injection attacks.".to_string(),
        },
        VulnerabilityCheck {
            id: "VULN031".to_string(),
            language: "Rust-Solana".to_string(),
            title: "CPI to Unauthorized Programs".to_string(),
            severity: "High".to_string(),
            pattern: r"invoke\(\[.*?\], &[.*?]\)".to_string(),
            safe_pattern: Some(r"if &authorized_programs.contains(&program_id) { ... }".to_string()),
            description: "Invoking unauthorized or risky external programs can expose the contract to vulnerabilities present in those programs.".to_string(),
            suggested_fix: "Whitelist external programs that can be invoked, and perform thorough security reviews on them.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana001".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Misuse of Unsafe Code".to_string(),
            severity: "High".to_string(),
            pattern: r"unsafe\s*\{".to_string(),
            safe_pattern: None,
            description: "Unsafe blocks may lead to undefined behavior and memory safety violations if not used carefully. Ensure justification and proper auditing.".to_string(),
            suggested_fix: "Minimize the use of `unsafe` by leveraging safe Rust-Solana abstractions and validate all `unsafe` blocks for safety guarantees.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana002".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Improper Error Handling".to_string(),
            severity: "Medium".to_string(),
            pattern: r"\.unwrap\(\)|\.expect\(".to_string(),
            safe_pattern: None,
            description: "Overuse of `unwrap()` or `expect()` can lead to panics. Prefer using error handling mechanisms like `match` or `if let`.".to_string(),
            suggested_fix: "Replace `unwrap()` and `expect()` with proper error handling to prevent unexpected panics in production code.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana003".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Overuse of Panics for Control Flow".to_string(),
            severity: "Medium".to_string(),
            pattern: r"panic!\(".to_string(),
            safe_pattern: None,
            description: "Using panics for control flow makes code hard to follow and can lead to unexpected termination.".to_string(),
            suggested_fix: "Use Result types for error handling and reserve panics for unrecoverable errors only.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana004".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Concurrency Issues and Data Races".to_string(),
            severity: "High".to_string(),
            pattern: r"std::thread|std::sync".to_string(),
            safe_pattern: None,
            description: "Improper handling of threads and synchronization can lead to data races, deadlocks, and other concurrency issues.".to_string(),
            suggested_fix: "Use Rust-Solana's concurrency primitives correctly, prefer `std::sync` module's types like Mutex, RwLock, and leverage the `rayon` crate for data parallelism.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana005".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Potential Memory Leaks".to_string(),
            severity: "Low".to_string(),
            pattern: r"Rc<|Arc<|Box<".to_string(),
            safe_pattern: None,
            description: "Cyclic references or improper use of smart pointers can lead to memory leaks.".to_string(),
            suggested_fix: "Use `Weak` pointers to break cycles and audit memory usage regularly.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana006".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Potential DoS Vulnerabilities".to_string(),
            severity: "High".to_string(),
            pattern: r"\.clone\(|Vec::with_capacity\(|String::with_capacity\(".to_string(),
            safe_pattern: None,
            description: "Allocations based on untRust-Solanaed input sizes can lead to DoS via memory exhaustion.".to_string(),
            suggested_fix: "Validate input sizes before allocations and use bounded collections. Consider rate-limiting or other mitigation strategies.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana007".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Missing Boundary Checks".to_string(),
            severity: "Medium".to_string(),
            pattern: r"\[\w+\]".to_string(),
            safe_pattern: Some(r"\.get\(\w+\)".to_string()),
            description: "Accessing arrays or vectors without boundary checks can lead to panics or buffer overflows.".to_string(),
            suggested_fix: "Use `.get()` or `.get_mut()` for safe access with bounds checking, and handle the Option result appropriately.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana008".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Unnecessary Cloning of Large Data Structures".to_string(),
            severity: "Low".to_string(),
            pattern: r"\.clone\(".to_string(),
            safe_pattern: None,
            description: "Cloning large data structures can lead to performance issues due to excessive memory use.".to_string(),
            suggested_fix: "Prefer borrowing or using reference-counted types like `Rc` or `Arc` to share data without deep copying.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana009".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Blocking I/O in Asynchronous Code".to_string(),
            severity: "Medium".to_string(),
            pattern: r"std::fs|std::net".to_string(),
            safe_pattern: Some(r"tokio::fs|tokio::net".to_string()),
            description: "Performing blocking I/O operations in async contexts can lead to thread starvation and reduced scalability.".to_string(),
            suggested_fix: "Use asynchronous equivalents for file and network operations within async functions.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana010".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Misuse of Arc<Mutex<T>>".to_string(),
            severity: "Medium".to_string(),
            pattern: r"Arc<Mutex<.*?>>".to_string(),
            safe_pattern: None,
            description: "Incorrect use of Arc<Mutex<T>> can lead to deadlocks or inefficient locking mechanisms.".to_string(),
            suggested_fix: "Ensure that locks are held for the minimum duration necessary, and consider other synchronization primitives like RwLock if applicable.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana011".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Improper Implementation of Drop Trait".to_string(),
            severity: "Medium".to_string(),
            pattern: r"impl\s+Drop\s+for\s+.*?\s*\{".to_string(),
            safe_pattern: None,
            description: "Incorrect custom implementations of the Drop trait can lead to resource leaks or panic safety issues.".to_string(),
            suggested_fix: "Implement the Drop trait carefully, ensuring that errors are handled gracefully and resources are properly released.".to_string(),
        },
        VulnerabilityCheck {
            id: "Rust-Solana012".to_string(),
            language: "Rust-Solana".to_string(),
            title: "Usage of mem::uninitialized and mem::zeroed".to_string(),
            severity: "High".to_string(),
            pattern: r"mem::uninitialized\(\)|mem::zeroed\(\)".to_string(),
            safe_pattern: None,
            description: "Using mem::uninitialized or mem::zeroed can lead to undefined behavior if the type has any non-zero or complex initialization requirements.".to_string(),
            suggested_fix: "Prefer using safe initialization patterns and avoid these functions for types with non-trivial initialization requirements.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY001".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Storage ABIEncoderV2 Array".to_string(),
            severity: "High".to_string(),
            pattern: r"abi\.encode\(\w+\)".to_string(),
            safe_pattern: None,
            description: "solc versions 0.4.7-0.5.9 contain a compiler bug leading to incorrect ABI encoder usage.".to_string(),
            suggested_fix: "Use a compiler >= 0.5.10.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY002".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Arbitrary from in transferFrom".to_string(),
            severity: "High".to_string(),
            pattern: r"transferFrom\(\s*[^,]+,\s*msg.sender".to_string(),
            safe_pattern: Some(r"transferFrom\(\s*msg.sender".to_string()),
            description: "Detect when msg.sender is not used as from in transferFrom.".to_string(),
            suggested_fix: "Use msg.sender as from in transferFrom.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY003".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Modifying storage array by value".to_string(),
            severity: "High".to_string(),
            pattern: r"function\s+\w+\s*\(\s*uint\[\d+\]\s+\w+\s*\)\s*internal".to_string(),
            safe_pattern: Some(r"function\s+\w+\s*\(\s*uint\[\d+\]\s+storage\s+\w+\s*\)\s*internal".to_string()),
            description: "Detect arrays passed to a function that expects reference to a storage array.".to_string(),
            suggested_fix: "Ensure the correct usage of memory and storage in the function parameters. Make all the locations explicit.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY004".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "ABI encodePacked Collision".to_string(),
            severity: "High".to_string(),
            pattern: r"abi\.encodePacked\(\s*[^,]+\s*,\s*[^,]+".to_string(),
            safe_pattern: None,
            description: "Detect collision due to dynamic type usages in abi.encodePacked.".to_string(),
            suggested_fix: "Do not use more than one dynamic type in abi.encodePacked(). Use abi.encode(), preferably.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY005".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Incorrect shift in assembly".to_string(),
            severity: "High".to_string(),
            pattern: r"assembly\s*\{\s*shr\(\w+,\s*\d+\)\s*\}".to_string(),
            safe_pattern: Some(r"assembly\s*\{\s*shr\(\d+,\s*\w+\)\s*\}".to_string()),
            description: "Detect if the values in a shift operation are reversed.".to_string(),
            suggested_fix: "Swap the order of parameters.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY006".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Multiple constructor schemes".to_string(),
            severity: "High".to_string(),
            pattern: r"constructor\(\)\s*public\s*\{.*\}\s*function\s+\w+\(\)\s*public".to_string(),
            safe_pattern: None,
            description: "Detect multiple constructor definitions in the same contract (using new and old schemes).".to_string(),
            suggested_fix: "Only declare one constructor, preferably using the new scheme constructor(...) instead of function <contractName>(...).".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY008".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Public Mappings with Nested Variables".to_string(),
            severity: "High".to_string(),
            pattern: r"mapping\s*\(\w+\s*=>\s*\w+\[\]\)\s*public".to_string(),
            safe_pattern: None,
            description: "Prior to Solidity 0.5, a public mapping with nested structures returned incorrect values.".to_string(),
            suggested_fix: "Do not use public mapping with nested structures.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY009".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Right-to-Left-Override Character".to_string(),
            severity: "High".to_string(),
            pattern: r"U\+202E".to_string(),
            safe_pattern: None,
            description: "An attacker can manipulate the logic of the contract by using a right-to-left-override character.".to_string(),
            suggested_fix: "Special control characters must not be allowed.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY010".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "State Variable Shadowing".to_string(),
            severity: "High".to_string(),
            pattern: r"contract\s+\w+\s*is\s+\w+\s*\{.*address\s+owner;".to_string(),
            safe_pattern: None,
            description: "Detection of state variables shadowed.".to_string(),
            suggested_fix: "Remove the state variable shadowing.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY011".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Suicidal".to_string(),
            severity: "High".to_string(),
            pattern: r"function\s+kill\(\)\s*public\s*\{\s*selfdestruct\(".to_string(),
            safe_pattern: None,
            description: "Unprotected call to a function executing selfdestruct/suicide.".to_string(),
            suggested_fix: "Protect access to all sensitive functions.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY012".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Uninitialized State Variables".to_string(),
            severity: "High".to_string(),
            pattern: r"contract\s+\w+\s*\{.*address\s+\w+;.*\}\s*function\s+\w+\(\)\s*payable\s*public\s*\{".to_string(),
            safe_pattern: None,
            description: "Uninitialized state variables.".to_string(),
            suggested_fix: "Initialize all the variables. If a variable is meant to be initialized to zero, explicitly set it to zero to improve code readability.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY013".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Uninitialized Storage Variables".to_string(),
            severity: "High".to_string(),
            pattern: r"contract\s+\w+\s*\{.*function\s+\w+\(\)\s*\{.*struct\s+\w+\s*\w+;.*\w+\.\w+\s*=\s*0x0;".to_string(),
            safe_pattern: None,
            description: "An uninitialized storage variable will act as a reference to the first state variable, and can override a critical variable.".to_string(),
            suggested_fix: "Initialize all storage variables.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY014".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Unprotected Upgradeable Contract".to_string(),
            severity: "High".to_string(),
            pattern: r"contract\s+\w+\s*is\s+Initializable\s*\{.*function\s+initialize\(\)\s*external\s*initializer\{".to_string(),
            safe_pattern: None,
            description: "Detects logic contract that can be destructed.".to_string(),
            suggested_fix: "Add a constructor to ensure initialize cannot be called on the logic contract.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY015".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Arbitrary from in TransferFrom Used with Permit".to_string(),
            severity: "High".to_string(),
            pattern: r"function\s+\w+\(\s*address\s+from,\s*uint256\s+value.*\)\s*public\s*\{\s*erc20\.permit\(".to_string(),
            safe_pattern: None,
            description: "Detect when msg.sender is not used as from in transferFrom and permit is used.".to_string(),
            suggested_fix: "Ensure that the underlying ERC20 token correctly implements a permit function.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY016".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Functions that Send Ether to Arbitrary Destinations".to_string(),
            severity: "High".to_string(),
            pattern: r"function\s+\w+\(\)\s*public\s*\{\s*\w+\.transfer\(".to_string(),
            safe_pattern: None,
            description: "Unprotected call to a function sending Ether to an arbitrary address.".to_string(),
            suggested_fix: "Ensure that an arbitrary user cannot withdraw unauthorized funds.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY017".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Array Length Assignment".to_string(),
            severity: "High".to_string(),
            pattern: r"\.\s*length\s*=\s*\w+".to_string(),
            safe_pattern: None,
            description: "Detects the direct assignment of an array's length.".to_string(),
            suggested_fix: "Do not allow array lengths to be directly set; add values as needed.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY018".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Controlled Delegatecall".to_string(),
            severity: "High".to_string(),
            pattern: r"\.delegatecall\(".to_string(),
            safe_pattern: None,
            description: "Delegatecall or callcode to an address controlled by the user.".to_string(),
            suggested_fix: "Avoid using delegatecall. Use only trusted destinations.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY019".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Payable Functions Using Delegatecall Inside a Loop".to_string(),
            severity: "High".to_string(),
            pattern: r"public\s+payable\s*\{.*\.delegatecall\(".to_string(),
            safe_pattern: None,
            description: "Detect the use of delegatecall inside a loop in a payable function.".to_string(),
            suggested_fix: "Carefully check that the function called by delegatecall is not payable.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY020".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Incorrect Exponentiation".to_string(),
            severity: "High".to_string(),
            pattern: r"2\s*\^\s*256".to_string(),
            safe_pattern: None,
            description: "Detect use of bitwise xor ^ instead of exponential **.".to_string(),
            suggested_fix: "Use the correct operator ** for exponentiation.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY021".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Incorrect Return in Assembly".to_string(),
            severity: "High".to_string(),
            pattern: r"assembly\s*\{.*return\s*\(".to_string(),
            safe_pattern: None,
            description: "Detect if return in an assembly block halts unexpectedly the execution.".to_string(),
            suggested_fix: "Use the leave statement.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY022".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "msg.value Inside a Loop".to_string(),
            severity: "High".to_string(),
            pattern: r"for\s*\(.*\)\s*\{.*msg\.value.*\}".to_string(),
            safe_pattern: None,
            description: "Detect the use of msg.value inside a loop.".to_string(),
            suggested_fix: "Provide explicit amounts alongside the receivers array, matching msg.value.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY023".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Reentrancy Vulnerabilities".to_string(),
            severity: "High".to_string(),
            pattern: r"call\.value\(".to_string(),
            safe_pattern: None,
            description: "Detection of the reentrancy bug involving Ether.".to_string(),
            suggested_fix: "Apply the check-effects-interactions pattern.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY024".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Return Instead of Leave in Assembly".to_string(),
            severity: "High".to_string(),
            pattern: r"assembly\s*\{.*return\s*\(".to_string(),
            safe_pattern: None,
            description: "Detect if a return is used where a leave should be used.".to_string(),
            suggested_fix: "Use the leave statement.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY025".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Storage Signed Integer Array".to_string(),
            severity: "High".to_string(),
            pattern: r"int\[\d+\]\s*\w+;".to_string(),
            safe_pattern: None,
            description: "solc versions 0.4.7-0.5.9 contain a compiler bug leading to incorrect values in signed integer arrays.".to_string(),
            suggested_fix: "Use a compiler version >= 0.5.10.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY026".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Unchecked Transfer".to_string(),
            severity: "High".to_string(),
            pattern: r"\.transfer\(".to_string(),
            safe_pattern: None,
            description: "The return value of an external transfer/transferFrom call is not checked.".to_string(),
            suggested_fix: "Use SafeERC20, or ensure that the transfer/transferFrom return value is checked.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY027".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Weak PRNG".to_string(),
            severity: "High".to_string(),
            pattern: r"(block\.timestamp|now|block\.blockhash)\s*%".to_string(),
            safe_pattern: None,
            description: "Weak PRNG due to a modulo on block.timestamp, now, or blockhash.".to_string(),
            suggested_fix: "Do not use block.timestamp, now, or blockhash as a source of randomness.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY028".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Codex".to_string(),
            severity: "High".to_string(),
            pattern: r"codex".to_string(),  // Note: This pattern needs more specific details based on the tool's output.
            safe_pattern: None,
            description: "Use codex to find vulnerabilities.".to_string(),
            suggested_fix: "Review codex's message.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY029".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Domain Separator Collision".to_string(),
            severity: "Medium".to_string(),
            pattern: r"DOMAIN_SEPARATOR\(\)".to_string(),
            safe_pattern: None,
            description: "An ERC20 token function signature collides with EIP-2612's DOMAIN_SEPARATOR().".to_string(),
            suggested_fix: "Remove or rename the function that collides with DOMAIN_SEPARATOR().".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY030".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Dangerous Enum Conversion".to_string(),
            severity: "Medium".to_string(),
            pattern: r"enum\s+\w+\s*\{.*\}\s*;.*=\s*\w+\s*\(".to_string(),
            safe_pattern: None,
            description: "Detect out-of-range enum conversion.".to_string(),
            suggested_fix: "Check the enum conversion range.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY031".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Incorrect ERC20 Interface".to_string(),
            severity: "Medium".to_string(),
            pattern: r"function\s+transfer\(".to_string(),
            safe_pattern: None,
            description: "Incorrect return values for ERC20 functions.".to_string(),
            suggested_fix: "Set the appropriate return values for ERC20 functions.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY032".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Incorrect ERC721 Interface".to_string(),
            severity: "Medium".to_string(),
            pattern: r"function\s+ownerOf\(".to_string(),
            safe_pattern: None,
            description: "Incorrect return values for ERC721 functions.".to_string(),
            suggested_fix: "Set the appropriate return values for ERC721 functions.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY033".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Dangerous Strict Equalities".to_string(),
            severity: "Medium".to_string(),
            pattern: r"==\s*\d+\s*ether".to_string(),
            safe_pattern: None,
            description: "Use of strict equalities that can be easily manipulated by an attacker.".to_string(),
            suggested_fix: "Avoid using strict equality for Ether or token amounts.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY034".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Contracts that Lock Ether".to_string(),
            severity: "Medium".to_string(),
            pattern: r"function\s+\w+\(\)\s+payable".to_string(),
            safe_pattern: None,
            description: "Contract with a payable function, but without a withdrawal capacity.".to_string(),
            suggested_fix: "Add a withdrawal function or remove the payable attribute.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY035".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Deletion on Mapping Containing a Structure".to_string(),
            severity: "Medium".to_string(),
            pattern: r"delete\s+\w+\[.*\]\s*;".to_string(),
            safe_pattern: None,
            description: "A deletion in a structure containing a mapping will not delete the mapping.".to_string(),
            suggested_fix: "Use a lock mechanism instead of a deletion for structures containing a mapping.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY036".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "State Variable Shadowing from Abstract Contracts".to_string(),
            severity: "Medium".to_string(),
            pattern: r"contract\s+\w+\s*is\s+\w+\s*\{.*address\s+\w+\s*;".to_string(),
            safe_pattern: None,
            description: "Detection of state variables shadowed from abstract contracts.".to_string(),
            suggested_fix: "Remove the state variable shadowing.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY037".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Misuse of a Boolean Constant".to_string(),
            severity: "Medium".to_string(),
            pattern: r"(if\s+\(\s*false\s*\))|(return\s+\(\s*b\s*\|\|\s*true\s*\))".to_string(),
            safe_pattern: None,
            description: "Detects the misuse of a Boolean constant.".to_string(),
            suggested_fix: "Verify and simplify the condition.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY040".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Divide Before Multiply".to_string(),
            severity: "Medium".to_string(),
            pattern: r"\w+\s*=\s*\w+\s*/\s*\w+\s*\*\s*\w+".to_string(),
            safe_pattern: None,
            description: "Performing division before multiplication can lead to precision loss.".to_string(),
            suggested_fix: "Consider ordering multiplication before division.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY041".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Reentrancy Vulnerabilities (No Ether)".to_string(),
            severity: "Medium".to_string(),
            pattern: r"msg\.sender\.call\(\)\s*[^;]*;".to_string(),
            safe_pattern: None,
            description: "Detection of reentrancy bug that does not involve Ether.".to_string(),
            suggested_fix: "Apply the check-effects-interactions pattern.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY042".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Reused Base Constructors".to_string(),
            severity: "Medium".to_string(),
            pattern: r"constructor\(\)\s+(public|internal|external|private)\s+.*\(\)".to_string(),
            safe_pattern: None,
            description: "Detects if the same base constructor is called with arguments from two different locations.".to_string(),
            suggested_fix: "Remove the duplicate constructor call.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY043".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Dangerous Usage of tx.origin".to_string(),
            severity: "Medium".to_string(),
            pattern: r"tx\.origin".to_string(),
            safe_pattern: None,
            description: "tx.origin-based protection can be abused by a malicious contract.".to_string(),
            suggested_fix: "Do not use tx.origin for authorization.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY044".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Unchecked Low-Level Calls".to_string(),
            severity: "Medium".to_string(),
            pattern: r"\.call\(\)|\.delegatecall\(\)".to_string(),
            safe_pattern: None,
            description: "The return value of a low-level call is not checked.".to_string(),
            suggested_fix: "Ensure that the return value of a low-level call is checked or logged.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY045".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Unchecked Send".to_string(),
            severity: "Medium".to_string(),
            pattern: r"\.send\(".to_string(),
            safe_pattern: None,
            description: "The return value of a send is not checked.".to_string(),
            suggested_fix: "Ensure that the return value of send is checked or logged.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY047".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Return Bomb".to_string(),
            severity: "Low".to_string(),
            pattern: r"revert\\(0,\\s*1000000\\)".to_string(),
            safe_pattern: None,
            description: "A low-level callee may consume all caller's gas unexpectedly.".to_string(),
            suggested_fix: "Avoid unlimited implicit decoding of returndata.".to_string(),
        },
        VulnerabilityCheck {
            id: "SOLIDITY048".to_string(),
            language: "Solidity-Ethereum".to_string(),
            title: "Block Timestamp".to_string(),
            severity: "Low".to_string(),
            pattern: r"block\\.timestamp".to_string(),
            safe_pattern: None,
            description: "Dangerous usage of block.timestamp, which can be manipulated by miners.".to_string(),
            suggested_fix: "Avoid relying on block.timestamp for critical logic or randomness.".to_string(),
        },
    ]
}
